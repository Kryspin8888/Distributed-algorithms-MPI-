#include <mpi.h>
#include <iostream>
#include<fstream>
#include <cstdlib>
#include<vector>

using namespace std;

void vectorsend(vector<int> &values, int dest );
vector <int> vectorrecv (int source);

int main(int argc, char** argv){
MPI_Init (&argc, &argv);
int world_rank;
MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
int world_size;
MPI_Comm_size(MPI_COMM_WORLD,&world_size);

if(world_rank == 0)
    {	
	vector<int> vec(3);
	vec[0] = 5;
	vec[1] = 10;
	vec[2] = 5;
	
	cout<<"Procesor 0 - wysylam\n";
	vectorsend(vec,1);
    }	

if (world_rank == 1)
    {	
	cout<<"Procesor 1 - odbieram\n";
	vector<int> res = vectorrecv(0);
	int rozm2 = res.size();
	for(int i = 0; i < rozm2; i++)
	    cout<<res[i]<<"\n";
	    
    }

MPI_Finalize();
}

void vectorsend(const vector<int> &values, int dest )
{
    int rozm1 = values.size();
    MPI_Send(&rozm1,1,MPI_INT,dest,0,MPI_COMM_WORLD);
    MPI_Send(&(values[0]),values.size(),MPI_INT,dest,0,MPI_COMM_WORLD);
    
}

vector <int> vectorrecv (int source)
{	
    int rozm;
    MPI_Recv(&rozm,1,MPI_INT,source,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
    vector<int> result(rozm);
    MPI_Recv(&(result[0]),rozm,MPI_INT,source,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
    
    return result;
}